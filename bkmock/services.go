// Code generated by MockGen. DO NOT EDIT.
// Source: bkiface.go
//
// Generated by this command:
//
//	mockgen -destination=bkmock/services.go -source=bkiface.go -package=bkmock
//

// Package bkmock is a generated GoMock package.
package bkmock

import (
	context "context"
	io "io"
	reflect "reflect"

	buildkite "github.com/buildkite/go-buildkite/v4"
	gomock "go.uber.org/mock/gomock"
)

// MockAccessTokens is a mock of AccessTokens interface.
type MockAccessTokens struct {
	ctrl     *gomock.Controller
	recorder *MockAccessTokensMockRecorder
}

// MockAccessTokensMockRecorder is the mock recorder for MockAccessTokens.
type MockAccessTokensMockRecorder struct {
	mock *MockAccessTokens
}

// NewMockAccessTokens creates a new mock instance.
func NewMockAccessTokens(ctrl *gomock.Controller) *MockAccessTokens {
	mock := &MockAccessTokens{ctrl: ctrl}
	mock.recorder = &MockAccessTokensMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessTokens) EXPECT() *MockAccessTokensMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAccessTokens) Get(arg0 context.Context) (buildkite.AccessToken, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(buildkite.AccessToken)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAccessTokensMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccessTokens)(nil).Get), arg0)
}

// Revoke mocks base method.
func (m *MockAccessTokens) Revoke(arg0 context.Context) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", arg0)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockAccessTokensMockRecorder) Revoke(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockAccessTokens)(nil).Revoke), arg0)
}

// MockAgents is a mock of Agents interface.
type MockAgents struct {
	ctrl     *gomock.Controller
	recorder *MockAgentsMockRecorder
}

// MockAgentsMockRecorder is the mock recorder for MockAgents.
type MockAgentsMockRecorder struct {
	mock *MockAgents
}

// NewMockAgents creates a new mock instance.
func NewMockAgents(ctrl *gomock.Controller) *MockAgents {
	mock := &MockAgents{ctrl: ctrl}
	mock.recorder = &MockAgentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgents) EXPECT() *MockAgentsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAgents) Create(arg0 context.Context, arg1 string, arg2 buildkite.Agent) (buildkite.Agent, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.Agent)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockAgentsMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgents)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockAgents) Delete(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAgentsMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgents)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockAgents) Get(arg0 context.Context, arg1, arg2 string) (buildkite.Agent, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.Agent)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockAgentsMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAgents)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockAgents) List(arg0 context.Context, arg1 string, arg2 *buildkite.AgentListOptions) ([]buildkite.Agent, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]buildkite.Agent)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockAgentsMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAgents)(nil).List), arg0, arg1, arg2)
}

// Stop mocks base method.
func (m *MockAgents) Stop(arg0 context.Context, arg1, arg2 string, arg3 bool) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockAgentsMockRecorder) Stop(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAgents)(nil).Stop), arg0, arg1, arg2, arg3)
}

// MockAnnotations is a mock of Annotations interface.
type MockAnnotations struct {
	ctrl     *gomock.Controller
	recorder *MockAnnotationsMockRecorder
}

// MockAnnotationsMockRecorder is the mock recorder for MockAnnotations.
type MockAnnotationsMockRecorder struct {
	mock *MockAnnotations
}

// NewMockAnnotations creates a new mock instance.
func NewMockAnnotations(ctrl *gomock.Controller) *MockAnnotations {
	mock := &MockAnnotations{ctrl: ctrl}
	mock.recorder = &MockAnnotationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnnotations) EXPECT() *MockAnnotationsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAnnotations) Create(arg0 context.Context, arg1, arg2, arg3 string, arg4 buildkite.AnnotationCreate) (buildkite.Annotation, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(buildkite.Annotation)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockAnnotationsMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAnnotations)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// ListByBuild mocks base method.
func (m *MockAnnotations) ListByBuild(arg0 context.Context, arg1, arg2, arg3 string, arg4 *buildkite.AnnotationListOptions) ([]buildkite.Annotation, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByBuild", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]buildkite.Annotation)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByBuild indicates an expected call of ListByBuild.
func (mr *MockAnnotationsMockRecorder) ListByBuild(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByBuild", reflect.TypeOf((*MockAnnotations)(nil).ListByBuild), arg0, arg1, arg2, arg3, arg4)
}

// MockArtifacts is a mock of Artifacts interface.
type MockArtifacts struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactsMockRecorder
}

// MockArtifactsMockRecorder is the mock recorder for MockArtifacts.
type MockArtifactsMockRecorder struct {
	mock *MockArtifacts
}

// NewMockArtifacts creates a new mock instance.
func NewMockArtifacts(ctrl *gomock.Controller) *MockArtifacts {
	mock := &MockArtifacts{ctrl: ctrl}
	mock.recorder = &MockArtifactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifacts) EXPECT() *MockArtifactsMockRecorder {
	return m.recorder
}

// DownloadArtifactByURL mocks base method.
func (m *MockArtifacts) DownloadArtifactByURL(arg0 context.Context, arg1 string, arg2 io.Writer) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadArtifactByURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadArtifactByURL indicates an expected call of DownloadArtifactByURL.
func (mr *MockArtifactsMockRecorder) DownloadArtifactByURL(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadArtifactByURL", reflect.TypeOf((*MockArtifacts)(nil).DownloadArtifactByURL), arg0, arg1, arg2)
}

// ListByBuild mocks base method.
func (m *MockArtifacts) ListByBuild(arg0 context.Context, arg1, arg2, arg3 string, arg4 *buildkite.ArtifactListOptions) ([]buildkite.Artifact, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByBuild", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]buildkite.Artifact)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByBuild indicates an expected call of ListByBuild.
func (mr *MockArtifactsMockRecorder) ListByBuild(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByBuild", reflect.TypeOf((*MockArtifacts)(nil).ListByBuild), arg0, arg1, arg2, arg3, arg4)
}

// ListByJob mocks base method.
func (m *MockArtifacts) ListByJob(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *buildkite.ArtifactListOptions) ([]buildkite.Artifact, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByJob", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]buildkite.Artifact)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByJob indicates an expected call of ListByJob.
func (mr *MockArtifactsMockRecorder) ListByJob(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByJob", reflect.TypeOf((*MockArtifacts)(nil).ListByJob), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockBuilds is a mock of Builds interface.
type MockBuilds struct {
	ctrl     *gomock.Controller
	recorder *MockBuildsMockRecorder
}

// MockBuildsMockRecorder is the mock recorder for MockBuilds.
type MockBuildsMockRecorder struct {
	mock *MockBuilds
}

// NewMockBuilds creates a new mock instance.
func NewMockBuilds(ctrl *gomock.Controller) *MockBuilds {
	mock := &MockBuilds{ctrl: ctrl}
	mock.recorder = &MockBuildsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilds) EXPECT() *MockBuildsMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockBuilds) Cancel(arg0 context.Context, arg1, arg2, arg3 string) (buildkite.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockBuildsMockRecorder) Cancel(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockBuilds)(nil).Cancel), arg0, arg1, arg2, arg3)
}

// Create mocks base method.
func (m *MockBuilds) Create(arg0 context.Context, arg1, arg2 string, arg3 buildkite.CreateBuild) (buildkite.Build, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.Build)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockBuildsMockRecorder) Create(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBuilds)(nil).Create), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockBuilds) Get(arg0 context.Context, arg1, arg2, arg3 string, arg4 *buildkite.BuildsListOptions) (buildkite.Build, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(buildkite.Build)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockBuildsMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBuilds)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// List mocks base method.
func (m *MockBuilds) List(arg0 context.Context, arg1 *buildkite.BuildsListOptions) ([]buildkite.Build, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]buildkite.Build)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockBuildsMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBuilds)(nil).List), arg0, arg1)
}

// ListByOrg mocks base method.
func (m *MockBuilds) ListByOrg(arg0 context.Context, arg1 string, arg2 *buildkite.BuildsListOptions) ([]buildkite.Build, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByOrg", arg0, arg1, arg2)
	ret0, _ := ret[0].([]buildkite.Build)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByOrg indicates an expected call of ListByOrg.
func (mr *MockBuildsMockRecorder) ListByOrg(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByOrg", reflect.TypeOf((*MockBuilds)(nil).ListByOrg), arg0, arg1, arg2)
}

// ListByPipeline mocks base method.
func (m *MockBuilds) ListByPipeline(arg0 context.Context, arg1, arg2 string, arg3 *buildkite.BuildsListOptions) ([]buildkite.Build, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPipeline", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]buildkite.Build)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByPipeline indicates an expected call of ListByPipeline.
func (mr *MockBuildsMockRecorder) ListByPipeline(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPipeline", reflect.TypeOf((*MockBuilds)(nil).ListByPipeline), arg0, arg1, arg2, arg3)
}

// Rebuild mocks base method.
func (m *MockBuilds) Rebuild(arg0 context.Context, arg1, arg2, arg3 string) (buildkite.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rebuild", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rebuild indicates an expected call of Rebuild.
func (mr *MockBuildsMockRecorder) Rebuild(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rebuild", reflect.TypeOf((*MockBuilds)(nil).Rebuild), arg0, arg1, arg2, arg3)
}

// MockClusterQueues is a mock of ClusterQueues interface.
type MockClusterQueues struct {
	ctrl     *gomock.Controller
	recorder *MockClusterQueuesMockRecorder
}

// MockClusterQueuesMockRecorder is the mock recorder for MockClusterQueues.
type MockClusterQueuesMockRecorder struct {
	mock *MockClusterQueues
}

// NewMockClusterQueues creates a new mock instance.
func NewMockClusterQueues(ctrl *gomock.Controller) *MockClusterQueues {
	mock := &MockClusterQueues{ctrl: ctrl}
	mock.recorder = &MockClusterQueuesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterQueues) EXPECT() *MockClusterQueuesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClusterQueues) Create(arg0 context.Context, arg1, arg2 string, arg3 buildkite.ClusterQueueCreate) (buildkite.ClusterQueue, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.ClusterQueue)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockClusterQueuesMockRecorder) Create(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterQueues)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockClusterQueues) Delete(arg0 context.Context, arg1, arg2, arg3 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterQueuesMockRecorder) Delete(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterQueues)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockClusterQueues) Get(arg0 context.Context, arg1, arg2, arg3 string) (buildkite.ClusterQueue, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.ClusterQueue)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockClusterQueuesMockRecorder) Get(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterQueues)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockClusterQueues) List(arg0 context.Context, arg1, arg2 string, arg3 *buildkite.ClusterQueuesListOptions) ([]buildkite.ClusterQueue, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]buildkite.ClusterQueue)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockClusterQueuesMockRecorder) List(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterQueues)(nil).List), arg0, arg1, arg2, arg3)
}

// Pause mocks base method.
func (m *MockClusterQueues) Pause(arg0 context.Context, arg1, arg2, arg3 string, arg4 buildkite.ClusterQueuePause) (buildkite.ClusterQueue, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(buildkite.ClusterQueue)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Pause indicates an expected call of Pause.
func (mr *MockClusterQueuesMockRecorder) Pause(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockClusterQueues)(nil).Pause), arg0, arg1, arg2, arg3, arg4)
}

// Resume mocks base method.
func (m *MockClusterQueues) Resume(arg0 context.Context, arg1, arg2, arg3 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resume indicates an expected call of Resume.
func (mr *MockClusterQueuesMockRecorder) Resume(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockClusterQueues)(nil).Resume), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockClusterQueues) Update(arg0 context.Context, arg1, arg2, arg3 string, arg4 buildkite.ClusterQueueUpdate) (buildkite.ClusterQueue, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(buildkite.ClusterQueue)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockClusterQueuesMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterQueues)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}

// MockClusterTokens is a mock of ClusterTokens interface.
type MockClusterTokens struct {
	ctrl     *gomock.Controller
	recorder *MockClusterTokensMockRecorder
}

// MockClusterTokensMockRecorder is the mock recorder for MockClusterTokens.
type MockClusterTokensMockRecorder struct {
	mock *MockClusterTokens
}

// NewMockClusterTokens creates a new mock instance.
func NewMockClusterTokens(ctrl *gomock.Controller) *MockClusterTokens {
	mock := &MockClusterTokens{ctrl: ctrl}
	mock.recorder = &MockClusterTokensMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterTokens) EXPECT() *MockClusterTokensMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClusterTokens) Create(arg0 context.Context, arg1, arg2 string, arg3 buildkite.ClusterTokenCreateUpdate) (buildkite.ClusterToken, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.ClusterToken)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockClusterTokensMockRecorder) Create(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterTokens)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockClusterTokens) Delete(arg0 context.Context, arg1, arg2, arg3 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterTokensMockRecorder) Delete(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterTokens)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockClusterTokens) Get(arg0 context.Context, arg1, arg2, arg3 string) (buildkite.ClusterToken, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.ClusterToken)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockClusterTokensMockRecorder) Get(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterTokens)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockClusterTokens) List(arg0 context.Context, arg1, arg2 string, arg3 *buildkite.ClusterTokensListOptions) ([]buildkite.ClusterToken, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]buildkite.ClusterToken)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockClusterTokensMockRecorder) List(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterTokens)(nil).List), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockClusterTokens) Update(arg0 context.Context, arg1, arg2, arg3 string, arg4 buildkite.ClusterTokenCreateUpdate) (buildkite.ClusterToken, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(buildkite.ClusterToken)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockClusterTokensMockRecorder) Update(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterTokens)(nil).Update), arg0, arg1, arg2, arg3, arg4)
}

// MockClusters is a mock of Clusters interface.
type MockClusters struct {
	ctrl     *gomock.Controller
	recorder *MockClustersMockRecorder
}

// MockClustersMockRecorder is the mock recorder for MockClusters.
type MockClustersMockRecorder struct {
	mock *MockClusters
}

// NewMockClusters creates a new mock instance.
func NewMockClusters(ctrl *gomock.Controller) *MockClusters {
	mock := &MockClusters{ctrl: ctrl}
	mock.recorder = &MockClustersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusters) EXPECT() *MockClustersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClusters) Create(arg0 context.Context, arg1 string, arg2 buildkite.ClusterCreate) (buildkite.Cluster, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.Cluster)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockClustersMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusters)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockClusters) Delete(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClustersMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusters)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockClusters) Get(arg0 context.Context, arg1, arg2 string) (buildkite.Cluster, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.Cluster)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockClustersMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusters)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockClusters) List(arg0 context.Context, arg1 string, arg2 *buildkite.ClustersListOptions) ([]buildkite.Cluster, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]buildkite.Cluster)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockClustersMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusters)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockClusters) Update(arg0 context.Context, arg1, arg2 string, arg3 buildkite.ClusterUpdate) (buildkite.Cluster, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.Cluster)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockClustersMockRecorder) Update(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusters)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockFlakyTests is a mock of FlakyTests interface.
type MockFlakyTests struct {
	ctrl     *gomock.Controller
	recorder *MockFlakyTestsMockRecorder
}

// MockFlakyTestsMockRecorder is the mock recorder for MockFlakyTests.
type MockFlakyTestsMockRecorder struct {
	mock *MockFlakyTests
}

// NewMockFlakyTests creates a new mock instance.
func NewMockFlakyTests(ctrl *gomock.Controller) *MockFlakyTests {
	mock := &MockFlakyTests{ctrl: ctrl}
	mock.recorder = &MockFlakyTestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlakyTests) EXPECT() *MockFlakyTestsMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockFlakyTests) List(arg0 context.Context, arg1, arg2 string, arg3 *buildkite.FlakyTestsListOptions) ([]buildkite.FlakyTest, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]buildkite.FlakyTest)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockFlakyTestsMockRecorder) List(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFlakyTests)(nil).List), arg0, arg1, arg2, arg3)
}

// MockJobs is a mock of Jobs interface.
type MockJobs struct {
	ctrl     *gomock.Controller
	recorder *MockJobsMockRecorder
}

// MockJobsMockRecorder is the mock recorder for MockJobs.
type MockJobsMockRecorder struct {
	mock *MockJobs
}

// NewMockJobs creates a new mock instance.
func NewMockJobs(ctrl *gomock.Controller) *MockJobs {
	mock := &MockJobs{ctrl: ctrl}
	mock.recorder = &MockJobsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobs) EXPECT() *MockJobsMockRecorder {
	return m.recorder
}

// GetJobEnvironmentVariables mocks base method.
func (m *MockJobs) GetJobEnvironmentVariables(arg0 context.Context, arg1, arg2, arg3, arg4 string) (buildkite.JobEnvs, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobEnvironmentVariables", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(buildkite.JobEnvs)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJobEnvironmentVariables indicates an expected call of GetJobEnvironmentVariables.
func (mr *MockJobsMockRecorder) GetJobEnvironmentVariables(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobEnvironmentVariables", reflect.TypeOf((*MockJobs)(nil).GetJobEnvironmentVariables), arg0, arg1, arg2, arg3, arg4)
}

// GetJobLog mocks base method.
func (m *MockJobs) GetJobLog(arg0 context.Context, arg1, arg2, arg3, arg4 string) (buildkite.JobLog, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobLog", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(buildkite.JobLog)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetJobLog indicates an expected call of GetJobLog.
func (mr *MockJobsMockRecorder) GetJobLog(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobLog", reflect.TypeOf((*MockJobs)(nil).GetJobLog), arg0, arg1, arg2, arg3, arg4)
}

// RetryJob mocks base method.
func (m *MockJobs) RetryJob(arg0 context.Context, arg1, arg2, arg3, arg4 string) (buildkite.Job, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryJob", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(buildkite.Job)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RetryJob indicates an expected call of RetryJob.
func (mr *MockJobsMockRecorder) RetryJob(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryJob", reflect.TypeOf((*MockJobs)(nil).RetryJob), arg0, arg1, arg2, arg3, arg4)
}

// UnblockJob mocks base method.
func (m *MockJobs) UnblockJob(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 *buildkite.JobUnblockOptions) (buildkite.Job, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockJob", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(buildkite.Job)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UnblockJob indicates an expected call of UnblockJob.
func (mr *MockJobsMockRecorder) UnblockJob(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockJob", reflect.TypeOf((*MockJobs)(nil).UnblockJob), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MockOrganizations is a mock of Organizations interface.
type MockOrganizations struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsMockRecorder
}

// MockOrganizationsMockRecorder is the mock recorder for MockOrganizations.
type MockOrganizationsMockRecorder struct {
	mock *MockOrganizations
}

// NewMockOrganizations creates a new mock instance.
func NewMockOrganizations(ctrl *gomock.Controller) *MockOrganizations {
	mock := &MockOrganizations{ctrl: ctrl}
	mock.recorder = &MockOrganizationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizations) EXPECT() *MockOrganizationsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOrganizations) Get(arg0 context.Context, arg1 string) (buildkite.Organization, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(buildkite.Organization)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockOrganizationsMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOrganizations)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockOrganizations) List(arg0 context.Context, arg1 *buildkite.OrganizationListOptions) ([]buildkite.Organization, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]buildkite.Organization)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOrganizationsMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrganizations)(nil).List), arg0, arg1)
}

// MockPackageRegistries is a mock of PackageRegistries interface.
type MockPackageRegistries struct {
	ctrl     *gomock.Controller
	recorder *MockPackageRegistriesMockRecorder
}

// MockPackageRegistriesMockRecorder is the mock recorder for MockPackageRegistries.
type MockPackageRegistriesMockRecorder struct {
	mock *MockPackageRegistries
}

// NewMockPackageRegistries creates a new mock instance.
func NewMockPackageRegistries(ctrl *gomock.Controller) *MockPackageRegistries {
	mock := &MockPackageRegistries{ctrl: ctrl}
	mock.recorder = &MockPackageRegistriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackageRegistries) EXPECT() *MockPackageRegistriesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPackageRegistries) Create(arg0 context.Context, arg1 string, arg2 buildkite.CreatePackageRegistryInput) (buildkite.PackageRegistry, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.PackageRegistry)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPackageRegistriesMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPackageRegistries)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockPackageRegistries) Delete(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPackageRegistriesMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPackageRegistries)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockPackageRegistries) Get(arg0 context.Context, arg1, arg2 string) (buildkite.PackageRegistry, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.PackageRegistry)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPackageRegistriesMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPackageRegistries)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockPackageRegistries) List(arg0 context.Context, arg1 string) ([]buildkite.PackageRegistry, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]buildkite.PackageRegistry)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPackageRegistriesMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPackageRegistries)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockPackageRegistries) Update(arg0 context.Context, arg1, arg2 string, arg3 buildkite.UpdatePackageRegistryInput) (buildkite.PackageRegistry, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.PackageRegistry)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockPackageRegistriesMockRecorder) Update(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPackageRegistries)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockPackages is a mock of Packages interface.
type MockPackages struct {
	ctrl     *gomock.Controller
	recorder *MockPackagesMockRecorder
}

// MockPackagesMockRecorder is the mock recorder for MockPackages.
type MockPackagesMockRecorder struct {
	mock *MockPackages
}

// NewMockPackages creates a new mock instance.
func NewMockPackages(ctrl *gomock.Controller) *MockPackages {
	mock := &MockPackages{ctrl: ctrl}
	mock.recorder = &MockPackagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackages) EXPECT() *MockPackagesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPackages) Create(arg0 context.Context, arg1, arg2 string, arg3 buildkite.CreatePackageInput) (buildkite.Package, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.Package)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPackagesMockRecorder) Create(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPackages)(nil).Create), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockPackages) Get(arg0 context.Context, arg1, arg2, arg3 string) (buildkite.Package, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.Package)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPackagesMockRecorder) Get(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPackages)(nil).Get), arg0, arg1, arg2, arg3)
}

// RequestPresignedUpload mocks base method.
func (m *MockPackages) RequestPresignedUpload(arg0 context.Context, arg1, arg2 string) (*buildkite.PackagePresignedUpload, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestPresignedUpload", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.PackagePresignedUpload)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RequestPresignedUpload indicates an expected call of RequestPresignedUpload.
func (mr *MockPackagesMockRecorder) RequestPresignedUpload(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestPresignedUpload", reflect.TypeOf((*MockPackages)(nil).RequestPresignedUpload), arg0, arg1, arg2)
}

// MockPipelineTemplates is a mock of PipelineTemplates interface.
type MockPipelineTemplates struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineTemplatesMockRecorder
}

// MockPipelineTemplatesMockRecorder is the mock recorder for MockPipelineTemplates.
type MockPipelineTemplatesMockRecorder struct {
	mock *MockPipelineTemplates
}

// NewMockPipelineTemplates creates a new mock instance.
func NewMockPipelineTemplates(ctrl *gomock.Controller) *MockPipelineTemplates {
	mock := &MockPipelineTemplates{ctrl: ctrl}
	mock.recorder = &MockPipelineTemplatesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineTemplates) EXPECT() *MockPipelineTemplatesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPipelineTemplates) Create(arg0 context.Context, arg1 string, arg2 buildkite.PipelineTemplateCreateUpdate) (buildkite.PipelineTemplate, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.PipelineTemplate)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPipelineTemplatesMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPipelineTemplates)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockPipelineTemplates) Delete(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPipelineTemplatesMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPipelineTemplates)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockPipelineTemplates) Get(arg0 context.Context, arg1, arg2 string) (buildkite.PipelineTemplate, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.PipelineTemplate)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPipelineTemplatesMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPipelineTemplates)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockPipelineTemplates) List(arg0 context.Context, arg1 string, arg2 *buildkite.PipelineTemplateListOptions) ([]buildkite.PipelineTemplate, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]buildkite.PipelineTemplate)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPipelineTemplatesMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPipelineTemplates)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockPipelineTemplates) Update(arg0 context.Context, arg1, arg2 string, arg3 buildkite.PipelineTemplateCreateUpdate) (buildkite.PipelineTemplate, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.PipelineTemplate)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockPipelineTemplatesMockRecorder) Update(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPipelineTemplates)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockPipelines is a mock of Pipelines interface.
type MockPipelines struct {
	ctrl     *gomock.Controller
	recorder *MockPipelinesMockRecorder
}

// MockPipelinesMockRecorder is the mock recorder for MockPipelines.
type MockPipelinesMockRecorder struct {
	mock *MockPipelines
}

// NewMockPipelines creates a new mock instance.
func NewMockPipelines(ctrl *gomock.Controller) *MockPipelines {
	mock := &MockPipelines{ctrl: ctrl}
	mock.recorder = &MockPipelinesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelines) EXPECT() *MockPipelinesMockRecorder {
	return m.recorder
}

// AddWebhook mocks base method.
func (m *MockPipelines) AddWebhook(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWebhook", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWebhook indicates an expected call of AddWebhook.
func (mr *MockPipelinesMockRecorder) AddWebhook(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWebhook", reflect.TypeOf((*MockPipelines)(nil).AddWebhook), arg0, arg1, arg2)
}

// Archive mocks base method.
func (m *MockPipelines) Archive(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Archive indicates an expected call of Archive.
func (mr *MockPipelinesMockRecorder) Archive(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockPipelines)(nil).Archive), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockPipelines) Create(arg0 context.Context, arg1 string, arg2 buildkite.CreatePipeline) (buildkite.Pipeline, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.Pipeline)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockPipelinesMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPipelines)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockPipelines) Delete(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPipelinesMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPipelines)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockPipelines) Get(arg0 context.Context, arg1, arg2 string) (buildkite.Pipeline, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.Pipeline)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockPipelinesMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPipelines)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockPipelines) List(arg0 context.Context, arg1 string, arg2 *buildkite.PipelineListOptions) ([]buildkite.Pipeline, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]buildkite.Pipeline)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPipelinesMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPipelines)(nil).List), arg0, arg1, arg2)
}

// Unarchive mocks base method.
func (m *MockPipelines) Unarchive(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unarchive", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unarchive indicates an expected call of Unarchive.
func (mr *MockPipelinesMockRecorder) Unarchive(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unarchive", reflect.TypeOf((*MockPipelines)(nil).Unarchive), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockPipelines) Update(arg0 context.Context, arg1, arg2 string, arg3 buildkite.UpdatePipeline) (buildkite.Pipeline, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.Pipeline)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockPipelinesMockRecorder) Update(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPipelines)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// CurrentUser mocks base method.
func (m *MockUsers) CurrentUser(arg0 context.Context) (buildkite.User, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUser", arg0)
	ret0, _ := ret[0].(buildkite.User)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CurrentUser indicates an expected call of CurrentUser.
func (mr *MockUsersMockRecorder) CurrentUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockUsers)(nil).CurrentUser), arg0)
}

// MockTeams is a mock of Teams interface.
type MockTeams struct {
	ctrl     *gomock.Controller
	recorder *MockTeamsMockRecorder
}

// MockTeamsMockRecorder is the mock recorder for MockTeams.
type MockTeamsMockRecorder struct {
	mock *MockTeams
}

// NewMockTeams creates a new mock instance.
func NewMockTeams(ctrl *gomock.Controller) *MockTeams {
	mock := &MockTeams{ctrl: ctrl}
	mock.recorder = &MockTeamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeams) EXPECT() *MockTeamsMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockTeams) List(arg0 context.Context, arg1 string, arg2 *buildkite.TeamsListOptions) ([]buildkite.Team, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]buildkite.Team)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTeamsMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTeams)(nil).List), arg0, arg1, arg2)
}

// MockTestRuns is a mock of TestRuns interface.
type MockTestRuns struct {
	ctrl     *gomock.Controller
	recorder *MockTestRunsMockRecorder
}

// MockTestRunsMockRecorder is the mock recorder for MockTestRuns.
type MockTestRunsMockRecorder struct {
	mock *MockTestRuns
}

// NewMockTestRuns creates a new mock instance.
func NewMockTestRuns(ctrl *gomock.Controller) *MockTestRuns {
	mock := &MockTestRuns{ctrl: ctrl}
	mock.recorder = &MockTestRunsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestRuns) EXPECT() *MockTestRunsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTestRuns) Get(arg0 context.Context, arg1, arg2, arg3 string) (buildkite.TestRun, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.TestRun)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockTestRunsMockRecorder) Get(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTestRuns)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockTestRuns) List(arg0 context.Context, arg1, arg2 string, arg3 *buildkite.TestRunsListOptions) ([]buildkite.TestRun, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]buildkite.TestRun)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTestRunsMockRecorder) List(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTestRuns)(nil).List), arg0, arg1, arg2, arg3)
}

// MockTestSuites is a mock of TestSuites interface.
type MockTestSuites struct {
	ctrl     *gomock.Controller
	recorder *MockTestSuitesMockRecorder
}

// MockTestSuitesMockRecorder is the mock recorder for MockTestSuites.
type MockTestSuitesMockRecorder struct {
	mock *MockTestSuites
}

// NewMockTestSuites creates a new mock instance.
func NewMockTestSuites(ctrl *gomock.Controller) *MockTestSuites {
	mock := &MockTestSuites{ctrl: ctrl}
	mock.recorder = &MockTestSuitesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestSuites) EXPECT() *MockTestSuitesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestSuites) Create(arg0 context.Context, arg1 string, arg2 buildkite.TestSuiteCreate) (buildkite.TestSuite, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.TestSuite)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockTestSuitesMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestSuites)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockTestSuites) Delete(arg0 context.Context, arg1, arg2 string) (*buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(*buildkite.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTestSuitesMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTestSuites)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockTestSuites) Get(arg0 context.Context, arg1, arg2 string) (buildkite.TestSuite, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(buildkite.TestSuite)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockTestSuitesMockRecorder) Get(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTestSuites)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockTestSuites) List(arg0 context.Context, arg1 string, arg2 *buildkite.TestSuiteListOptions) ([]buildkite.TestSuite, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]buildkite.TestSuite)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockTestSuitesMockRecorder) List(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTestSuites)(nil).List), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockTestSuites) Update(arg0 context.Context, arg1, arg2 string, arg3 buildkite.TestSuite) (buildkite.TestSuite, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.TestSuite)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockTestSuitesMockRecorder) Update(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestSuites)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockTests is a mock of Tests interface.
type MockTests struct {
	ctrl     *gomock.Controller
	recorder *MockTestsMockRecorder
}

// MockTestsMockRecorder is the mock recorder for MockTests.
type MockTestsMockRecorder struct {
	mock *MockTests
}

// NewMockTests creates a new mock instance.
func NewMockTests(ctrl *gomock.Controller) *MockTests {
	mock := &MockTests{ctrl: ctrl}
	mock.recorder = &MockTestsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTests) EXPECT() *MockTestsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTests) Get(arg0 context.Context, arg1, arg2, arg3 string) (buildkite.Test, *buildkite.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(buildkite.Test)
	ret1, _ := ret[1].(*buildkite.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockTestsMockRecorder) Get(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTests)(nil).Get), arg0, arg1, arg2, arg3)
}
